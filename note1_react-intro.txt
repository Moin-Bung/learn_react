We can either create a react app using npm or by using basic html/css/js

npm: npx create-react-app {project_name}

html/js/css: add script tags to pull in the following:
    - react.development.js
    - react.dom.development.js
    - babel.min.js

React has this cool thing called React DOM.

ReactDOM has many react methods:
    - ReactDOM.render({what to place}, {where to place it}) 
        allows us to add html elements to the screen
        good to write declarative statements

Why use React?
    - It gives us a declarative and imperative way to write code
    - Composable and Declarative features

Composable code:
    - Similar to sculpting
    - Instead of creating a whole scuplture, we can create small pieces of it using lego bricks
    - We can split our code into custom components, and make it easier to reuse and maintain

    We can create functions to call later on... example:
        function MainContent(){ 
            return (<h1> Content </h1>)
        }

Declarative:
    - Tell me what to do, I'll get figure out how to get it done.

Imperative:
    - Tell me every step on how to do something.


const paragraphs = pokemon.map(mon => `<p>${mon}</p>`)
// -->          ["<p>Bulbasaur</p>", "<p>Charmander</p>", "<p>Squirtle</p>"]
 .map  //allows us to convert an array of raw data into an array of JSX elements
        // makes our code self-sustaining


Conditional Rendering:
{props.openSpots === 0 && <div className="card--badge">SOLD OUT</div>}
    Will only render the div if openSpots is 0

Prop Spread:
{...item} -> spreads its values into properties

